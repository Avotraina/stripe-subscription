{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///home/avotraina/projetcts/bun/blog-generator/app/lib/db.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst prismaClientSingleton = () => {\n  return new PrismaClient()\n}\n\ndeclare const globalThis: {\n  prismaGlobal: ReturnType<typeof prismaClientSingleton>;\n} & typeof global;\n\nconst prisma = globalThis.prismaGlobal ?? prismaClientSingleton()\n\nexport default prisma\n\nif (process.env.NODE_ENV !== 'production') globalThis.prismaGlobal = prisma"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,wBAAwB;IAC5B,OAAO,IAAI,2GAAA,CAAA,eAAY;AACzB;AAMA,MAAM,SAAS,WAAW,YAAY,IAAI;uCAE3B;AAEf,wCAA2C,WAAW,YAAY,GAAG"}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":["file:///home/avotraina/projetcts/bun/blog-generator/app/api/website/route.ts"],"sourcesContent":["import prisma from \"@/app/lib/db\";\nimport { T_CreateWebsiteRequest, T_GetWebsiteRequest, T_UpdateWebsiteRequest } from \"@/app/types/website\";\nimport { PrismaClientKnownRequestError } from \"@prisma/client/runtime/library\";\nimport { NextApiRequest, NextApiResponse } from \"next\";\nimport { NextResponse } from \"next/server\";\n\n// export async function GET() {\n//     const websites = await prisma.website.findMany();\n\n//     return NextResponse.json({response: websites});\n// }\n\nexport async function POST(req: T_CreateWebsiteRequest) {\n    const data = await req.json();\n\n    try {\n        const result = await prisma.website.create({\n            data: data\n        });\n        return NextResponse.json({ response: result });\n    } catch (error: unknown) {\n        if (error instanceof PrismaClientKnownRequestError) {\n            return NextResponse.json({ error: error.code }, { status: 500 });\n        }\n        return NextResponse.json({ error: 'Unknown error occurred' }, { status: 500 });\n    }\n}\n\nexport async function GET() {\n\n    const websites = await prisma.website.findMany()\n    return NextResponse.json({ response: websites });\n}\n\nexport async function PATCH(req: T_UpdateWebsiteRequest) {\n    const websiteId = req.nextUrl?.searchParams.get(\"id\");\n    if (!websiteId) {\n        return NextResponse.json({error: \"wesite id required\"});\n    }\n\n    const data = await req.json();\n    await prisma.website.update({\n        where: {\n            id: websiteId,\n        },\n        data: {\n            ... data\n        }\n    });\n\n\treturn NextResponse.json({response: \"Website updated successfully\"});\n\n}\n\n\n// export const POST = async (req: T_CreateWebsiteRequest) => {\n//     const { name, shopId, apiKey, userId, keyCloakUserId } = await req.json();\n//     const website = await prisma.website.create({\n//         data: {\n//             name,\n//             shopId,\n//             apiKey,\n//             userId,\n//             keyCloakUserId\n//         },\n//     });\n\n//     return NextResponse.json({website})\n// }"],"names":[],"mappings":";;;;;AAAA;AAEA;AAEA;;;;AAQO,eAAe,KAAK,GAA2B;IAClD,MAAM,OAAO,MAAM,IAAI,IAAI;IAE3B,IAAI;QACA,MAAM,SAAS,MAAM,kHAAA,CAAA,UAAM,CAAC,OAAO,CAAC,MAAM,CAAC;YACvC,MAAM;QACV;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,UAAU;QAAO;IAChD,EAAE,OAAO,OAAgB;QACrB,IAAI,iBAAiB,iIAAA,CAAA,gCAA6B,EAAE;YAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO,MAAM,IAAI;YAAC,GAAG;gBAAE,QAAQ;YAAI;QAClE;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAyB,GAAG;YAAE,QAAQ;QAAI;IAChF;AACJ;AAEO,eAAe;IAElB,MAAM,WAAW,MAAM,kHAAA,CAAA,UAAM,CAAC,OAAO,CAAC,QAAQ;IAC9C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,UAAU;IAAS;AAClD;AAEO,eAAe,MAAM,GAA2B;IACnD,MAAM,YAAY,IAAI,OAAO,EAAE,aAAa,IAAI;IAChD,IAAI,CAAC,WAAW;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAC,OAAO;QAAoB;IACzD;IAEA,MAAM,OAAO,MAAM,IAAI,IAAI;IAC3B,MAAM,kHAAA,CAAA,UAAM,CAAC,OAAO,CAAC,MAAM,CAAC;QACxB,OAAO;YACH,IAAI;QACR;QACA,MAAM;YACF,GAAI,IAAI;QACZ;IACJ;IAEH,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAC,UAAU;IAA8B;AAEnE,EAGA,+DAA+D;CAC/D,iFAAiF;CACjF,oDAAoD;CACpD,kBAAkB;CAClB,oBAAoB;CACpB,sBAAsB;CACtB,sBAAsB;CACtB,sBAAsB;CACtB,6BAA6B;CAC7B,aAAa;CACb,UAAU;CAEV,0CAA0C;CAC1C,IAAI"}},
    {"offset": {"line": 153, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}