{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///home/avotraina/projetcts/bun/blog-generator/app/lib/db.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\n\nconst prismaClientSingleton = () => {\n  return new PrismaClient()\n}\n\ndeclare const globalThis: {\n  prismaGlobal: ReturnType<typeof prismaClientSingleton>;\n} & typeof global;\n\nconst prisma = globalThis.prismaGlobal ?? prismaClientSingleton()\n\nexport default prisma\n\nif (process.env.NODE_ENV !== 'production') globalThis.prismaGlobal = prisma"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,wBAAwB;IAC5B,OAAO,IAAI,2GAAA,CAAA,eAAY;AACzB;AAMA,MAAM,SAAS,WAAW,YAAY,IAAI;uCAE3B;AAEf,wCAA2C,WAAW,YAAY,GAAG"}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":["file:///home/avotraina/projetcts/bun/blog-generator/app/services/users.ts"],"sourcesContent":["import { getSession } from \"next-auth/react\";\nimport prisma from \"../lib/db\";\nimport { getServerSession } from \"next-auth\";\n\nexport function generateInitials(name: string) {\n  return `${name.split(' ')[0][0]}${name.split(' ')[1][0]}`;\n}\n\n\nexport function generateFallbackBackground(name: string): string {\n  let hash = 0;\n  let i;\n\n  for (i = 0; i < name.length; i += 1) {\n    hash = name.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  let color = '#';\n\n  for (i = 0; i < 3; i += 1) {\n    const value = (hash >> (i * 8)) & 0xff;\n    color += `00${value.toString(16)}`.slice(-2);\n  }\n\n  return color;\n}\n\n\nexport const findUserFromCustomerId = async (stripeCustomerId: unknown) => {\n\n  if (typeof stripeCustomerId !== \"string\") {\n    return null;\n  }\n\n  return prisma.user.findFirst({\n    where: {\n      stripeCustomerId,\n    }\n  });\n}\n\nexport const findUserByEmail = async (email: string) => {\n\n  return prisma.user.findFirst({\n    where: {\n      email,\n    }\n  });\n}"],"names":[],"mappings":";;;;;;AACA;;AAGO,SAAS,iBAAiB,IAAY;IAC3C,OAAO,GAAG,KAAK,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,GAAG,KAAK,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;AAC3D;AAGO,SAAS,2BAA2B,IAAY;IACrD,IAAI,OAAO;IACX,IAAI;IAEJ,IAAK,IAAI,GAAG,IAAI,KAAK,MAAM,EAAE,KAAK,EAAG;QACnC,OAAO,KAAK,UAAU,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,IAAI,IAAI;IACjD;IAEA,IAAI,QAAQ;IAEZ,IAAK,IAAI,GAAG,IAAI,GAAG,KAAK,EAAG;QACzB,MAAM,QAAQ,AAAC,QAAS,IAAI,IAAM;QAClC,SAAS,CAAC,EAAE,EAAE,MAAM,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAC5C;IAEA,OAAO;AACT;AAGO,MAAM,yBAAyB,OAAO;IAE3C,IAAI,OAAO,qBAAqB,UAAU;QACxC,OAAO;IACT;IAEA,OAAO,kHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QAC3B,OAAO;YACL;QACF;IACF;AACF;AAEO,MAAM,kBAAkB,OAAO;IAEpC,OAAO,kHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,SAAS,CAAC;QAC3B,OAAO;YACL;QACF;IACF;AACF"}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///home/avotraina/projetcts/bun/blog-generator/app/api/webhooks/stripe/route.ts"],"sourcesContent":["import prisma from \"@/app/lib/db\";\nimport { get, patch } from \"@/app/lib/server\";\nimport { findUserByEmail, findUserFromCustomerId } from \"@/app/services/users\";\nimport { getSession } from \"next-auth/react\";\nimport { NextRequest, NextResponse } from \"next/server\";\nimport Stripe from \"stripe\";\n\nexport const POST = async (req: NextRequest) => {\n    const body = (await req.json()) as Stripe.Event;\n\n    switch (body.type) {\n        case \"checkout.session.completed\":\n            const checkoutSession = body.data.object as Stripe.Checkout.Session;\n            // Handle successful payment\n            const stripeCustomerId = checkoutSession.customer;\n            const user = await prisma.user.update({\n                where: {\n                    email: checkoutSession?.customer_email as string\n                },\n                data: {\n                    stripeCustomerId: stripeCustomerId as string,\n                    stripeSubscriptionId: checkoutSession?.subscription as string,\n                    // stripeInvoiceId: checkoutSession?.invoice as string\n                }\n            })\n            break;\n\n        case \"payment_intent.succeeded\":\n            const paymentIntent = body.data.object as Stripe.PaymentIntent;\n            // Handle successful payment intent\n            break;\n\n        case \"payment_intent.payment_failed\":\n            const failedPaymentIntent = body.data.object as Stripe.PaymentIntent;\n            // Handle failed payment\n            break;\n\n        case \"customer.subscription.created\":\n            const subscriptionCreated = body.data.object as Stripe.Subscription;\n            // Handle new subscription\n            break;\n\n        case \"customer.subscription.updated\":\n            const subscriptionUpdated = body.data.object as Stripe.Subscription;\n            // Handle subscription update\n            console.log(\"SUBSCRIPTION UPDATE\")\n\n            break;\n\n        case \"customer.subscription.deleted\":\n            const subscriptionDeleted = body.data.object as Stripe.Subscription;\n            // Handle subscription cancellation\n            const userForSubDeletion = await findUserFromCustomerId(subscriptionDeleted.customer);\n            await prisma.user.update({\n                where: {\n                    email: userForSubDeletion?.email as string\n                },\n                data: {\n                    stripeCustomerId: null,\n                    stripeSubscriptionId: null,\n                }\n            })\n            break;\n\n        case \"invoice.paid\":\n            const paidInvoice = body.data.object as Stripe.Invoice;\n            // Handle paid invoice\n            console.log(\"INVOICE PAID\")\n\n            break;\n\n        case \"invoice.payment_succeeded\":\n            const paymentSucceed = body.data.object as Stripe.Invoice;\n            // Handle paid invoice\n            console.log(\"INVOICE PAID\")\n\n            break;\n\n        case \"invoice.payment_failed\":\n            const failedInvoice = body.data.object as Stripe.Invoice;\n            // Handle failed invoice payment\n            break;\n\n        default:\n            console.log(`Unhandled event type: ${body.type}`);\n            break;\n        // case value:\n\n        //     break;\n\n        // default:\n        //     break;\n    }\n    return NextResponse.json({})\n\n}\n"],"names":[],"mappings":";;;AAAA;AAEA;AAEA;;;;AAGO,MAAM,OAAO,OAAO;IACvB,MAAM,OAAQ,MAAM,IAAI,IAAI;IAE5B,OAAQ,KAAK,IAAI;QACb,KAAK;YACD,MAAM,kBAAkB,KAAK,IAAI,CAAC,MAAM;YACxC,4BAA4B;YAC5B,MAAM,mBAAmB,gBAAgB,QAAQ;YACjD,MAAM,OAAO,MAAM,kHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBAClC,OAAO;oBACH,OAAO,iBAAiB;gBAC5B;gBACA,MAAM;oBACF,kBAAkB;oBAClB,sBAAsB,iBAAiB;gBAE3C;YACJ;YACA;QAEJ,KAAK;YACD,MAAM,gBAAgB,KAAK,IAAI,CAAC,MAAM;YAEtC;QAEJ,KAAK;YACD,MAAM,sBAAsB,KAAK,IAAI,CAAC,MAAM;YAE5C;QAEJ,KAAK;YACD,MAAM,sBAAsB,KAAK,IAAI,CAAC,MAAM;YAE5C;QAEJ,KAAK;YACD,MAAM,sBAAsB,KAAK,IAAI,CAAC,MAAM;YAC5C,6BAA6B;YAC7B,QAAQ,GAAG,CAAC;YAEZ;QAEJ,KAAK;YACD,MAAM,sBAAsB,KAAK,IAAI,CAAC,MAAM;YAC5C,mCAAmC;YACnC,MAAM,qBAAqB,MAAM,CAAA,GAAA,0HAAA,CAAA,yBAAsB,AAAD,EAAE,oBAAoB,QAAQ;YACpF,MAAM,kHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBACrB,OAAO;oBACH,OAAO,oBAAoB;gBAC/B;gBACA,MAAM;oBACF,kBAAkB;oBAClB,sBAAsB;gBAC1B;YACJ;YACA;QAEJ,KAAK;YACD,MAAM,cAAc,KAAK,IAAI,CAAC,MAAM;YACpC,sBAAsB;YACtB,QAAQ,GAAG,CAAC;YAEZ;QAEJ,KAAK;YACD,MAAM,iBAAiB,KAAK,IAAI,CAAC,MAAM;YACvC,sBAAsB;YACtB,QAAQ,GAAG,CAAC;YAEZ;QAEJ,KAAK;YACD,MAAM,gBAAgB,KAAK,IAAI,CAAC,MAAM;YAEtC;QAEJ;YACI,QAAQ,GAAG,CAAC,CAAC,sBAAsB,EAAE,KAAK,IAAI,EAAE;YAChD;IAOR;IACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,CAAC;AAE9B"}},
    {"offset": {"line": 192, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}