{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":["file:///home/avotraina/projetcts/bun/blog-generator/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import prisma from \"@/app/lib/db\";\nimport NextAuth, { AuthOptions } from \"next-auth\";\nimport KeycloakProvider from \"next-auth/providers/keycloak\";\nimport path from \"path\";\nimport fs from \"fs\";\n\nconst keycloak = KeycloakProvider({\n    clientId: `${process.env.KEYCLOAK_ID}`,\n    clientSecret: `${process.env.KEYCLOAK_SECRET}`,\n    issuer: `${process.env.KEYCLOAK_ISSUER}`,\n});\n\nexport const authOptions: AuthOptions = {\n    providers: [\n        keycloak\n    ],\n    secret: process.env.AUTH_SECRET,\n    callbacks: {\n        // async signIn({user, account, profile}) {\n\n        //     try {\n\n        //         await prisma.user.upsert({\n        //             where: { email: profile?.email },\n        //             update: {\n        //                 keycloakUserId: profile?.sub,\n        //                 email: profile?.email,\n        //                 fullname: profile?.name,\n        //                 image: profile?.image\n        //             },\n        //             create: {\n        //                 keycloakUserId: profile?.sub,\n        //                 email: profile?.email,\n        //                 fullname: profile?.name,\n        //                 image: profile?.image\n        //             },\n        //           });\n\n        //         return true;\n        //     } catch (error) {\n        //         const logPath = path.join(process.cwd(), \"debug.log\");\n        //         fs.appendFileSync(logPath, `${new Date().toISOString()} - ${JSON.stringify(error)}\\n`);\n\n        //         return false;\n        //     }\n\n        // },\n        async jwt({ token, account, profile }) {\n            if (account) {\n                token.id_token = account.id_token; // Include id_token in the token\n            }\n\n            if (account) {\n                token = { ...token, access_token: account.access_token };\n                token.exp = account.expires_at;\n                token.id_token = account.id_token ?? '';\n            }\n            return token;\n        },\n        async session({ session, token, user }) {\n            if (session) {\n                session.access_token = token.access_token as string;\n                // session.user = await getUserInfo(session.access_token);\n            }\n            return {\n                ...session,\n                token: token,\n            };\n        },\n    },\n    pages: {\n        signIn: \"/dashboard\"\n    },\n    session: {\n        strategy: \"jwt\"\n    },\n    events: {\n        async signOut({ token }) {\n            const { id_token } = token;\n            console.log('ROUTE')\n\n            try {\n                const params = new URLSearchParams();\n                params.append('id_token_hint', id_token as string);\n\n                await fetch(`${keycloak?.options?.issuer}/protocol/openid-connect/logout?${params.toString()}`);\n                if (typeof window !== 'undefined') window.location.href = '/login';\n\n            } catch (error) {\n                console.error('Unable to perform post-logout handshake');\n            }\n\n        },\n    }\n}\n\nconst handler = NextAuth(authOptions);\n\nexport { handler as GET, handler as POST }"],"names":[],"mappings":";;;;;AACA;AACA;;;AAIA,MAAM,WAAW,CAAA,GAAA,uJAAA,CAAA,UAAgB,AAAD,EAAE;IAC9B,UAAU,GAAG,QAAQ,GAAG,CAAC,WAAW,EAAE;IACtC,cAAc,GAAG,QAAQ,GAAG,CAAC,eAAe,EAAE;IAC9C,QAAQ,GAAG,QAAQ,GAAG,CAAC,eAAe,EAAE;AAC5C;AAEO,MAAM,cAA2B;IACpC,WAAW;QACP;KACH;IACD,QAAQ,QAAQ,GAAG,CAAC,WAAW;IAC/B,WAAW;QACP,2CAA2C;QAE3C,YAAY;QAEZ,qCAAqC;QACrC,gDAAgD;QAChD,wBAAwB;QACxB,gDAAgD;QAChD,yCAAyC;QACzC,2CAA2C;QAC3C,wCAAwC;QACxC,iBAAiB;QACjB,wBAAwB;QACxB,gDAAgD;QAChD,yCAAyC;QACzC,2CAA2C;QAC3C,wCAAwC;QACxC,iBAAiB;QACjB,gBAAgB;QAEhB,uBAAuB;QACvB,wBAAwB;QACxB,iEAAiE;QACjE,kGAAkG;QAElG,wBAAwB;QACxB,QAAQ;QAER,KAAK;QACL,MAAM,KAAI,EAAE,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE;YACjC,IAAI,SAAS;gBACT,MAAM,QAAQ,GAAG,QAAQ,QAAQ,EAAE,gCAAgC;YACvE;YAEA,IAAI,SAAS;gBACT,QAAQ;oBAAE,GAAG,KAAK;oBAAE,cAAc,QAAQ,YAAY;gBAAC;gBACvD,MAAM,GAAG,GAAG,QAAQ,UAAU;gBAC9B,MAAM,QAAQ,GAAG,QAAQ,QAAQ,IAAI;YACzC;YACA,OAAO;QACX;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE;YAClC,IAAI,SAAS;gBACT,QAAQ,YAAY,GAAG,MAAM,YAAY;YACzC,0DAA0D;YAC9D;YACA,OAAO;gBACH,GAAG,OAAO;gBACV,OAAO;YACX;QACJ;IACJ;IACA,OAAO;QACH,QAAQ;IACZ;IACA,SAAS;QACL,UAAU;IACd;IACA,QAAQ;QACJ,MAAM,SAAQ,EAAE,KAAK,EAAE;YACnB,MAAM,EAAE,QAAQ,EAAE,GAAG;YACrB,QAAQ,GAAG,CAAC;YAEZ,IAAI;gBACA,MAAM,SAAS,IAAI;gBACnB,OAAO,MAAM,CAAC,iBAAiB;gBAE/B,MAAM,MAAM,GAAG,UAAU,SAAS,OAAO,gCAAgC,EAAE,OAAO,QAAQ,IAAI;gBAC9F,uCAAmC;;gBAA+B;YAEtE,EAAE,OAAO,OAAO;gBACZ,QAAQ,KAAK,CAAC;YAClB;QAEJ;IACJ;AACJ;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE"}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}